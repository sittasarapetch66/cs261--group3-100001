// ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö
const requests = [
    { id: 1, status: "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", type: "‡∏•‡∏≤‡∏≠‡∏≠‡∏Å", studentId: "123456", name: "‡πÇ‡∏Å‡∏ô‡∏±‡∏ö ‡∏ñ‡∏ß‡∏≤‡∏™‡∏≤‡∏£", file: "‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö" },
    { id: 2, status: "‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß", type: "‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤", studentId: "654321", name: "‡∏™‡∏°‡∏´‡∏ç‡∏¥‡∏á ‡πÉ‡∏à‡∏î‡∏µ", file: "‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö" },
    { id: 3, status: "‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥", type: "‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤", studentId: "789012", name: "‡∏™‡∏°‡∏ä‡∏≤‡∏¢ ‡∏£‡∏±‡∏Å‡∏î‡∏µ", file: "‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ô‡∏ö" }
];

function LoadFunction(){

    fetchData()
}

async function fetchData() {
    const url = "http://petchsko123.trueddns.com:56267/group3/api/group3/request";
    try {
        const response = await fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        data = await response.json();
        renderTable(data);
    } catch (error) {
        console.error("Error fetching data:", error);
    }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
function renderTable(data) {
    const tableBody = document.getElementById("table-body");
    tableBody.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏ô

    if (data.length === 0) {
        const row = document.createElement("tr");
        row.innerHTML = `<td colspan="7">‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</td>`;
        tableBody.appendChild(row);
        return;
    }
    
    data.forEach((item, index) => {

        switch (item.requestType){
            case 0:
                requestType0 = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á"; break;
            case 1:
                requestType0 = "‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤"; break;
            case 2:
                requestType0 = "‡∏ñ‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤"; break;
            case 3:
                requestType0 = "‡∏à‡∏î‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏¥‡∏ä‡∏≤‡∏Ç‡πâ‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏π‡∏ï‡∏£"; break;
            case 4:
                requestType0 = "‡∏•‡∏≤‡∏≠‡∏≠‡∏Å"; break;
            case 99:
                requestType0 = "‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"; break;
            default:
                requestType0 = "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î"; break;

        }
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${item.id}</td>
            <td>${item.requestStatus}</td>
            <td>${requestType0}</td>
            <td>${item.username}</td>
            <td>${item.advisorNameTH}</td>
            <td><button class="cancel-button" id=${item.id} onclick="deleteRequest(${item.id})">X</button></td>
            <td><button class="download" id=${item.id} onclick="fetchData(${item.id})">üìÑ</button></td>
        `;
        tableBody.appendChild(row);
    });
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
function searchData() {
    const requestType = document.getElementById("request-type").value;
    const studentName = document.getElementById("student-name").value.trim();
    const studentId = document.getElementById("student-id").value.trim();

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
    const filteredRequests = data.filter((item) => {
        const matchType = requestType === '9999' || item.requestType === parseInt(requestType);
        const matchName = !studentName || item.advisorNameTH.includes(studentName);
        const matchId = !studentId || item.username.includes(studentId);

        console.log(item.requestType, requestType);
        return matchType && matchName && matchId;
    });

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏á
    renderTable(filteredRequests);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
function deleteRequest(id) {
    if (confirm("‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?")) {
        // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å Array
        const index = requests.findIndex((item) => item.id === id);
        if (index !== -1) {
            requests.splice(index, 1);
            alert("‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!");
        } else {
            alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
        searchData();
    }
}

// Download File
function downloadFile(id) {
    alert(`Downloading file for request ID ${id}`);
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
renderTable(requests);

//


function downloadFile(id){
    const base64Input =id.trim();
    if (!base64Input) {
        alert('Please paste a valid Base64 string.');
        return;
    }

    try {
        // Check if the Base64 string contains the prefix
        const matches = base64Input.match(/^data:(.*?);base64,(.*)$/);
        if (!matches) {
            alert('Invalid Base64 format. It should include the prefix data:[type]/[subtype];base64,.');
            return;
        }

        const mimeType = matches[1];
        const base64Data = matches[2];

        // Decode Base64 to binary
        const binaryData = atob(base64Data);
        const arrayBuffer = new Uint8Array(binaryData.length);
        for (let i = 0; i < binaryData.length; i++) {
            arrayBuffer[i] = binaryData.charCodeAt(i);
        }

        // Create a Blob from the ArrayBuffer
        const blob = new Blob([arrayBuffer], { type: mimeType });

        // Create a download link
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `download.${mimeType.split('/')[1]}`; // Use file extension from MIME type
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

    } catch (error) {
        console.error('Error converting Base64:', error);
        alert('An error occurred while converting the Base64 string. Please ensure it is valid.');
    }

}

/*
function fetchData(id) {
    const url = "http://petchsko123.trueddns.com:56267/api/group3/request/id=" + "1" + "/file=1";
    try {
        const response = fetch(url);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        data2 = response;
        downloadFile(data2);
    } catch (error) {
        console.error("Error fetching data:", error);
    }
}
*/

/*
document.getElementById('convertButton').addEventListener('click', function() {
    const base64Input = document.getElementById('base64Input').value.trim();

    if (!base64Input) {
        alert('Please paste a valid Base64 string.');
        return;
    }

    try {
        // Check if the Base64 string contains the prefix
        const matches = base64Input.match(/^data:(.*?);base64,(.*)$/);
        if (!matches) {
            alert('Invalid Base64 format. It should include the prefix data:[type]/[subtype];base64,.');
            return;
        }

        const mimeType = matches[1];
        const base64Data = matches[2];

        // Decode Base64 to binary
        const binaryData = atob(base64Data);
        const arrayBuffer = new Uint8Array(binaryData.length);
        for (let i = 0; i < binaryData.length; i++) {
            arrayBuffer[i] = binaryData.charCodeAt(i);
        }

        // Create a Blob from the ArrayBuffer
        const blob = new Blob([arrayBuffer], { type: mimeType });

        // Create a download link
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = `download.${mimeType.split('/')[1]}`; // Use file extension from MIME type
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

    } catch (error) {
        console.error('Error converting Base64:', error);
        alert('An error occurred while converting the Base64 string. Please ensure it is valid.');
    }
});
*/